# -*- coding: utf-8 -*-
"""Homework 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gri_JQ2hvwdf818k-AUYXDGSCM0Vtk_U
"""

global UID
UID = 117600384
global Last_Name
Last_Name = "Bhensdadia"
global First_Name
First_Name = "Jash"

import numpy as np

def refinement(t):
    t = t.replace(" ","").upper()
    if len(t)%3 == 0:
        return t
    elif len(t)%3 == 1:
        t = t + 'XX'
        return t
    else:
        t = t + 'X'
        return t
        
        
def hill_enc(M,test):
        n = refinement(test)
        length = len(n)/3
        intermediate = []
        for i in n:
            intermediate.append(ord(i)-65)
        arr = np.array(intermediate)
        plain = np.array_split(arr,length)
        h = []
        for i in range(int(length)):
            h.append(np.matmul(plain[i],M))
        h = np.array(h)
        h = h%26 + 65
        re = np.resize(h,(1,len(n)))
        re_list = re[0].tolist()
        p=''
        for i in re_list:
            p = p + chr(i)
        return p 


def hill_dec(M,test):
    test= refinement(test)
    Mod26invTable = {}
    for m in range(26):
      for minv in range(26):
        if (m*minv)%26==1:
          Mod26invTable[m] = minv
    Minv = np.linalg.inv(M)
    Mdet = np.linalg.det(M)
    Madj = Mdet*Minv
    Madj26 = Madj % 26
    Mdet26 = Mdet%26
    if Mdet26 in Mod26invTable:
      Mdet26inv = Mod26invTable[Mdet26]
    else:
      Mdet26inv = -1
    Minv26 = (Mdet26inv*Madj26)%26
    length = len(test)/3
    intermediate = []
    for i in test:
        intermediate.append(ord(i)-65)
    arr = np.array(intermediate)
    plain = np.array_split(arr,length)
    plain = np.array(plain)
    h=[]
    for i in range(int(length)):
        h.append(np.matrix.round(np.matmul(plain[i],Minv26))%26)
    h = np.array(h)
    h=h+ 65
    re = np.resize(h,(1,len(test)))
    re_list = re[0].tolist()
    relist = []
    for i in re_list:
        relist.append(int(i))
    p=''
    for i in relist:
        p = p + chr(i)
    return p 

def refinement_vi(k,t):
    t= t.replace(' ','').upper()
    klen = len(k)
    tlen = len(t)
    div = tlen-klen
    l = []
    for i in range(klen):
        l.append(k[i])
    for i in range(div):
        l.append(k[i%klen])
    return l,t

 

def vigenere_enc(key,test):
        key,test = refinement_vi(key,test)
        test_list = []
        for i in range(len(test)):
            test_list.append(test[i])
        test_new = []
        for i in range(len(test)):
            shift = ord(key[i])-65
            test_new.append(chr((ord(test_list[i]) -65 + shift)%26 +65))
        s=''
        for i in range(len(test_new)):
            s = s + test_new[i]
        return s

def vigenere_dec(key,test):
    key,test = refinement_vi(key,test)
    test_list = []
    for i in range(len(test)):
            test_list.append(test[i])
    test_new = []
    for i in range(len(test)):
        shift = ord(key[i])-65
        test_new.append(chr((ord(test_list[i])-65 -shift)%26 +65))
    s=''
    for i in range(len(test_new)):
        s = s + test_new[i]
    return s
